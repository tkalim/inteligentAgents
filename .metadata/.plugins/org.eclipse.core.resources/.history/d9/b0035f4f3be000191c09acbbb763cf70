 import java.awt.Color;
 import java.util.ArrayList;

import uchicago.src.sim.engine.BasicAction;
import uchicago.src.sim.engine.Schedule;
import uchicago.src.sim.engine.SimModelImpl;
import uchicago.src.sim.engine.SimInit;
import uchicago.src.sim.gui.DisplaySurface;
import uchicago.src.sim.gui.ColorMap;
import uchicago.src.sim.gui.Value2DDisplay;
import uchicago.src.sim.gui.Object2DDisplay;
import uchicago.src.sim.util.SimUtilities;

/**
 * Class that implements the simulation model for the rabbits grass
 * simulation.  This is the first class which needs to be setup in
 * order to run Repast simulation. It manages the entire RePast
 * environment and the simulation.
 *
 * @author 
 */


public class RabbitsGrassSimulationModel extends SimModelImpl {		

	//Default Values
	private static final int NUMINITRABBITS = 100;
	private static final int WORLDSIZE = 40;
	private static final int NUMINITGRASS = 100;
	
	private Schedule schedule;
	private int numInitRabbits = NUMINITRABBITS;
	private int gridSize = WORLDSIZE;
	private int numInitGrass = NUMINITGRASS;
	private int grassGrowthRate;
	private int birthThreshold;
	
	private grassSpace gSpace;
	
	private ArrayList agentList;
	
	private DisplaySurface displaySurf;
	
	public static void main(String[] args) {
			
			System.out.println("Rabbit skeleton");

			SimInit init = new SimInit();
			RabbitsGrassSimulationModel model = new RabbitsGrassSimulationModel();
			// Do "not" modify the following lines of parsing arguments
			if (args.length == 0) // by default, you don't use parameter file nor batch mode 
				init.loadModel(model, "", false);
			else
				init.loadModel(model, args[0], Boolean.parseBoolean(args[1]));
			
		}

		
		public void begin() {
			// TODO Auto-generated method stub
			buildModel();
		    buildSchedule();
		    buildDisplay();		
		    
		    displaySurf.display();
		}
		
		public void buildModel(){
			System.out.println("Running BuildModel");
			gSpace = new GrassSpace(gridSize, gridSize);
			gSpace.spreadGrass(grass);
			
			for (int i = 0; i < numAgents; i++) {
				addNewAgent();
			}
			for(int i = 0; i < agentList.size(); i++){
		      RabbitsGrassSimulationAgent cda = (RabbitsGrassSimulationAgent)agentList.get(i);
		      cda.report();
		    }
		}

		public void buildSchedule(){
			System.out.println("Running BuildSchedule");
		  }

		public void buildDisplay(){
			System.out.println("Running BuildDisplay");
			ColorMap map = new ColorMap();

		    map.mapColor(1, Color.black);
		    map.mapColor(0, Color.white);

		    Value2DDisplay displayMoney =
		        new Value2DDisplay(gSpace.getCurrentMoneySpace(), map);
		    
		    Object2DDisplay displayAgents = new Object2DDisplay(gSpace.getCurrentAgentSpace());
		    displayAgents.setObjectList(agentList);

		    displaySurf.addDisplayable(displayGrass, "Grass");
		    displaySurf.addDisplayable(displayAgents, "Agents");
		  }
		
		private void addNewAgent() {
			RabbitsGrassSimulationAgent a = new RabbitsGrassSimulationAgent();
			agentList.add(a);
			gSpace.addAgent(a);
		}

		public String[] getInitParam() {
			// TODO Auto-generated method stub
			// Parameters to be set by users via the Repast UI slider bar
			// Do "not" modify the parameters names provided in the skeleton code, you can add more if you want 
			String[] params = { "GridSize", "NumInitRabbits", "NumInitGrass", "GrassGrowthRate", "BirthThreshold"};
			return params;
		}

		public String getName() {
			// TODO Auto-generated method stub
			return null;
		}

		public Schedule getSchedule() {
			// TODO Auto-generated method stub
			return schedule;
		}

		public void setup() {
			// TODO Auto-generated method stub
			System.out.println("Running setup");
			gSpace = null;
			agentList = new ArrayList();
			
			 if (displaySurf != null){
		      displaySurf.dispose();
		    }
		    displaySurf = null;

		    displaySurf = new DisplaySurface(this, "Rabbits Model Window 1");

		    registerDisplaySurface("Rabbits Model Window 1", displaySurf);

		}
		public int getNumInitRabbits(){
		    return numInitRabbits;
		  }

		public void setNumInitRabbits(int na){
		    numInitRabbits = na;
		  }
		
		public int getGridSize(){
		    return gridSize;
		  }

		public void setGridSize(int na){
		    gridSize = na;
		  }
		
		public int getNumInitGrass(){
		    return numInitGrass;
		  }

		public void setNumInitGrass(int na){
		    numInitGrass = na;
		  }
		
		public int getGrassGrowthRate(){
		    return grassGrowthRate;
		  }

		public void setGrassGrowthRate(int na){
		    grassGrowthRate = na;
		  }
		
		public int getBirthThreshold(){
		    return birthThreshold;
		  }

		public void setBirthThreshold(int na){
		    birthThreshold = na;
		  }
}
